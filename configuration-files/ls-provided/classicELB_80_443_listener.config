# SSL Offload at ELB Level w/ HTTP to HTTPS redirect (VPC) (seanshi w/ credit to hubertc)
# This redirects HTTP to HTTPS and does SSL offloading on the ELB.

Resources:
  AWSEBLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
        - {LoadBalancerPort: 80, InstancePort: 80, Protocol: "HTTP", InstanceProtocol: "HTTP"}
        - {LoadBalancerPort: 443, InstancePort: 80, InstanceProtocol: "HTTP", Protocol: "HTTPS", SSLCertificateId: "arn:aws:acm:us-west-2:XXXXXXXXXXX:certificate/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"}
  # AWSEBSecurityGroupSSL:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: { "Fn::GetAtt" : [ "AWSEBSecurityGroup", "GroupId" ]}
  #     SourceSecurityGroupOwnerId: { "Fn::GetAtt" : [ "AWSEBLoadBalancer", "SourceSecurityGroup.OwnerAlias" ]}
  #     SourceSecurityGroupId: { "Fn::GetAtt" : [ "AWSEBLoadBalancerSecurityGroup", "GroupId" ]}
  #     IpProtocol: tcp
  #     FromPort: 443
  #     ToPort: 443
  # mysecurityGroupIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: { "Fn::GetAtt" : [ "AWSEBSecurityGroup", "GroupId" ]}
  #     IpProtocol: tcp
  #     ToPort: 8080
  #     FromPort: 8080
  #     SourceSecurityGroupOwnerId: { "Fn::GetAtt" : [ "AWSEBLoadBalancer", "SourceSecurityGroup.OwnerAlias" ]}
  #     SourceSecurityGroupId: { "Fn::GetAtt" : [ "AWSEBLoadBalancerSecurityGroup", "GroupId" ]}
  # SecurityGroupIngressELB:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: { "Fn::GetAtt" : [ "AWSEBLoadBalancerSecurityGroup", "GroupId" ]}
  #     CidrIp: 0.0.0.0/0
  #     IpProtocol: tcp
  #     ToPort: 443
  #     FromPort: 443
  # SecurityGroupEgressELB:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     GroupId: { "Fn::GetAtt" : [ "AWSEBLoadBalancerSecurityGroup", "GroupId" ]}
  #     DestinationSecurityGroupId: { "Fn::GetAtt" : [ "AWSEBSecurityGroup", "GroupId" ]}
  #     IpProtocol: tcp
  #     ToPort: 8080
  #     FromPort: 8080
 
